{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"testing.ipynb","provenance":[],"collapsed_sections":[],"mount_file_id":"1ZNxKek-p3JxZJV3wKaXHk75MFuH9T7ij","authorship_tag":"ABX9TyNR9CKCrZfBl1Hf215Ovhz9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"3QDb4gxs2R7i","colab":{"base_uri":"https://localhost:8080/","height":54},"executionInfo":{"status":"ok","timestamp":1587994076866,"user_tz":-420,"elapsed":3382,"user":{"displayName":"Alamandara Al","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjEVhDD2iLAJfrbG-fPHKabfPAJPeO7HlWuKnJUgw=s64","userId":"05248831363937426236"}},"outputId":"c4090d3e-e914-4caa-a9b0-e2b5f0ef0fbb"},"source":["from google.colab import drive \n","drive.mount('/content/drive/') "],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BOZpViyA3Cu7","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1587994090748,"user_tz":-420,"elapsed":2065,"user":{"displayName":"Alamandara Al","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjEVhDD2iLAJfrbG-fPHKabfPAJPeO7HlWuKnJUgw=s64","userId":"05248831363937426236"}},"outputId":"7215eb57-bb1d-48e0-a4ef-3597a8889c65"},"source":["%tensorflow_version 1.x"],"execution_count":null,"outputs":[{"output_type":"stream","text":["TensorFlow 1.x selected.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AD6k924a3C5d","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1587994101343,"user_tz":-420,"elapsed":8718,"user":{"displayName":"Alamandara Al","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjEVhDD2iLAJfrbG-fPHKabfPAJPeO7HlWuKnJUgw=s64","userId":"05248831363937426236"}},"outputId":"07d2cd32-c2a0-4e0e-db2e-7e0c5ddf8403"},"source":["from keras.models import load_model\n","from keras.preprocessing import image\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import os\n","import cv2 as cv\n","from PIL import Image"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"sFbk8sPb3rTT","colab":{"base_uri":"https://localhost:8080/","height":156},"executionInfo":{"status":"ok","timestamp":1587994114097,"user_tz":-420,"elapsed":11214,"user":{"displayName":"Alamandara Al","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjEVhDD2iLAJfrbG-fPHKabfPAJPeO7HlWuKnJUgw=s64","userId":"05248831363937426236"}},"outputId":"43b7d637-a95d-43de-a68a-8d8a225d3f24"},"source":["model_path = \"/content/drive/My Drive/Colab Notebooks/traning_2.h5\"\n","model = load_model(model_path)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:4070: The name tf.nn.max_pool is deprecated. Please use tf.nn.max_pool2d instead.\n","\n","WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7Hu6NEXKMck3"},"source":["def convert_to_array(img):\n","    im = cv.imread(img)\n","    img = Image.fromarray(im, 'RGB')\n","    image = img.resize((32, 32))\n","    return np.array(image)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"654ak-4dMddb"},"source":["def predict_label(file):\n","    print(\"Predicting .................................\")\n","    ar1=convert_to_array(file)\n","    ar=ar1/255\n","    #print (ar)\n","    \n","    a=[]\n","    a.append(ar)\n","    a=np.array(a)\n","    label_dict = {0: 'bukan_lahan_kosong', 1: 'lahan_kosong'}\n","    score=model.predict(a)\n","    ekspresi_top = score[0].argpartition(-2)[-2:][::-1]\n","    label_index=np.argmax(score[0][ekspresi_top[0]])\n","    label_index_2=np.argmax(score[0][ekspresi_top[1]])\n","    percent_high = np.around(100*score[0][ekspresi_top[0]],decimals=2)\n","    percent_secondhigh = np.around(100*score[0][ekspresi_top[1]],decimals=2)\n","    print(\"Prediksi : \"+label_dict[ekspresi_top[0]])\n","    print(\"Akurasi : \"+str(percent_high)+\"%\")\n","    print(\"Prediksi : \"+label_dict[ekspresi_top[1]])\n","    print(\"Akurasi : \"+str(percent_secondhigh)+\"%\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2ULZnP5IMiDD","colab":{"base_uri":"https://localhost:8080/","height":333},"executionInfo":{"status":"ok","timestamp":1587996929301,"user_tz":-420,"elapsed":1375,"user":{"displayName":"Alamandara Al","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjEVhDD2iLAJfrbG-fPHKabfPAJPeO7HlWuKnJUgw=s64","userId":"05248831363937426236"}},"outputId":"e7c2a739-f661-4228-af28-71a3324b97c5"},"source":["image_tes = '/content/drive/My Drive/Colab Notebooks/data_set/data_testing/lahan_kosong/lahan_kosong (100).jpg'\n","predict_label(image_tes)\n","\n","new_img = image.load_img(image_tes, target_size=(50, 50))\n","plt.figure(figsize = (4,4))\n","plt.imshow(new_img)\n","plt.axis('off')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Predicting .................................\n","Prediksi : lahan_kosong\n","Akurasi : 100.0%\n","Prediksi : bukan_lahan_kosong\n","Akurasi : 0.0%\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 288x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"fmZ4-kOkMn5U"},"source":["model.save('/content/drive/My Drive/Colab Notebooks/testing_2.h5')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RZNAqlPzEY4M"},"source":[""],"execution_count":null,"outputs":[]}]}